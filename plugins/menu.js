const config = require('../config');
const moment = require('moment-timezone');
const { cmd, commands } = require('../command');
const { runtime } = require('../lib/functions');
const os = require('os');
const { getPrefix } = require('../lib/prefix');

// Stylish Uppercase Conversion
function toUpperStylized(str) {
  const stylized = {
    A: '·¥Ä', B: ' ô', C: '·¥Ñ', D: '·¥Ö', E: '·¥á', F: '“ì', G: '…¢', H: ' ú',
    I: '…™', J: '·¥ä', K: '·¥ã', L: ' ü', M: '·¥ç', N: '…¥', O: '·¥è', P: '·¥ò',
    Q: '«´', R: ' Ä', S: 'Íú±', T: '·¥õ', U: '·¥ú', V: '·¥†', W: '·¥°', X: 'x',
    Y: ' è', Z: '·¥¢'
  };
  return str.split('').map(c => stylized[c.toUpperCase()] || c).join('');
}

// Normalize Categories
const normalize = (str) => str.toLowerCase().replace(/\s+menu$/, '').trim();

// Emojis for Categories
const emojiByCategory = {
  ai: 'ü§ñ', anime: 'üç•', audio: 'üéß', bible: 'üìñ', download: '‚¨áÔ∏è',
  downloader: 'üì•', fun: 'üéÆ', game: 'üïπÔ∏è', group: 'üë•', img_edit: 'üñåÔ∏è',
  info: '‚ÑπÔ∏è', information: 'üß†', logo: 'üñºÔ∏è', main: 'üè†', media: 'üéûÔ∏è',
  menu: 'üìú', misc: 'üì¶', music: 'üéµ', other: 'üìÅ', owner: 'üëë',
  privacy: 'üîí', search: 'üîé', settings: '‚öôÔ∏è', sticker: 'üåü', tools: 'üõ†Ô∏è',
  user: 'üë§', utilities: 'üß∞', utility: 'üßÆ', wallpapers: 'üñºÔ∏è', whatsapp: 'üì±',
};

// Main Command
cmd({
  pattern: 'menu',
  alias: ['allmenu'],
  desc: 'Show all bot commands',
  category: 'menu',
  react: 'üëå',
  filename: __filename
}, async (cmd, mek, m, { from, sender, reply }) => {
  try {
    const prefix = getPrefix();
    const timezone = config.TIMEZONE || 'Africa/Nairobi';
    const time = moment().tz(timezone).format('HH:mm:ss');
    const date = moment().tz(timezone).format('dddd, DD MMMM YYYY');

    const uptime = () => {
      let sec = process.uptime();
      let h = Math.floor(sec / 3600);
      let m = Math.floor((sec % 3600) / 60);
      let s = Math.floor(sec % 60);
      return `${h}h ${m}m ${s}s`;
    };

    // Header
    let menu = `
‚ïî‚ïê‚ïê‚ïê‚ùñ‚Ä¢‡≥ã¬∞ ¬∞‡≥ã‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïó
        ùïèùïã‚Ñù ùïÑùîº‚Ñïùïå
‚ïö‚ïê‚ïê‚ïê‚ùñ‚Ä¢‡≥ã¬∞ ¬∞‡≥ã‚Ä¢‚ùñ‚ïê‚ïê‚ïê‚ïù

üë§ *User:* @${sender.split("@")[0]}
‚è±Ô∏è *Runtime:* ${uptime()}
‚öôÔ∏è *Mode:* ${config.MODE}
üìå *Prefix:* ${config.PREFIX}
üëë *Owner:* ${config.OWNER_NAME}
üì¶ *Plugins:* ${commands.length}
üíª *Developer:* ·¥ò·¥è·¥ò·¥ã…™·¥Ö
üÜö *Version:* 2.0.0
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

    // Group Commands by Category
    const categories = {};
    for (const c of commands) {
      if (c.category && !c.dontAdd && c.pattern) {
        const normalizedCategory = normalize(c.category);
        categories[normalizedCategory] = categories[normalizedCategory] || [];
        categories[normalizedCategory].push(c.pattern.split('|')[0]);
      }
    }

    // Add Categories
    for (const cat of Object.keys(categories).sort()) {
      const emoji = emojiByCategory[cat] || 'üí´';
      menu += `\n\n‚îè‚îÅ‚ù∞ ${emoji} ${toUpperStylized(cat)} ${toUpperStylized('Menu')} ‚ù±‚îÅ‚îì\n`;
      for (const c of categories[cat].sort()) {
        menu += `‚îÉ ‚ùç‚Å†‚Å† ${prefix}${c}\n`;
      }
      menu += `‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`;
    }

    menu += `\n\n‚ú® ${config.DESCRIPTION || toUpperStylized('Explore the bot commands!')}`;

    // Context Info
    const imageContextInfo = {
      mentionedJid: [sender],
      forwardingScore: 999,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
        newsletterJid: config.NEWSLETTER_JID || '120363420342566562@newsletter',
        newsletterName: config.OWNER_NAME || toUpperStylized('popkid'),
        serverMessageId: 143
      }
    };

    // Send Menu with Image
    await cmd.sendMessage(
      from,
      {
        image: { url: config.MENU_IMAGE_URL || 'https://files.catbox.moe/tbdd5d.jpg' },
        caption: menu,
        contextInfo: imageContextInfo
      },
      { quoted: mek }
    );

    // Optional Audio
    if (config.MENU_AUDIO_URL) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      await cmd.sendMessage(
        from,
        {
          audio: { url: config.MENU_AUDIO_URL },
          mimetype: 'audio/mp4',
          ptt: true,
          contextInfo: imageContextInfo
        },
        { quoted: mek }
      );
    }

  } catch (e) {
    console.error('Menu Error:', e.message);
    await reply(`‚ùå ${toUpperStylized('Error')}: Failed to show menu.\n${toUpperStylized('Details')}: ${e.message}`);
  }
});
